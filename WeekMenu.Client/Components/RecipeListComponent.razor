
@inject IRecipeService _recipeService
@inject NavigationManager _navManager

<div class="p-3">
    <h4>@status</h4>
</div>


<div class="container">
    <div class="row">
        @foreach (var item in recipes)
        {
            <div class="card m-2 shadow-effect" style="width: 9rem; cursor: pointer;" @onclick="()=>GoToEditRecipe(item.RecipeModelID)" >
                <img class="card-img-top" style="height: 9rem; object-fit: cover;" src="@ShowImage(item)" alt="Card image cap">
                <div class="card-body">
                    <p class="card-text">@NameTrimer(item.RecipeName) </p>
                </div>
            </div>
        }
    </div>
</div>


@code {    

    [Parameter]
    public List<RecipeModel> FoundRecipes { get; set; }

    List<RecipeModel> recipes = new List<RecipeModel>();

    [Parameter]
    public string status { get; set; }

    string NameTrimer(string name)
    {
        if (name.Length > 20)
        {
            name = $"{name.Substring(0,20)}...";
        }
        return name;
    }

    void GoToEditRecipe(int id)
    {
        _navManager.NavigateTo($"/recipe/{id}");
    }

    protected override void OnParametersSet()
    {
        recipes = FoundRecipes;
        if (recipes.Count > 0)
        {
            status = "Click on recipe to edit";
        }

    }

    string ShowImage(RecipeModel model)
    {
        if (string.IsNullOrWhiteSpace(model.RecipeImageName) == false)
        {
            var fileExtension = model.RecipeImageName.Split('.');
            return $"data:image/{fileExtension[fileExtension.Length - 1]};base64, {Convert.ToBase64String(model.RecipeImageFile)}";
        }
        return "/Images/noImage.png";
    }

}
