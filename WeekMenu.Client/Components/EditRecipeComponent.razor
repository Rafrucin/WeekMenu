@page "/recipe/{Id:int}"
@page "/recipe"
@inject IRecipeService _recipeService
@inject IFileReaderService _fileReader
@inject NavigationManager _navManager
@using System.Text;

<div class="p-3">
    <h3>@title</h3>
</div>

<div class="container">
    <EditForm Model="model" OnValidSubmit="ProcessRecipe">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="form-group col-lg-6">
                <div>
                    <label class="col">
                        Dish Name
                        <InputText @bind-Value="model.RecipeName" class="form-control"></InputText>
                    </label>
                </div>
                <div>
                    <label class="col">
                        Indredients
                        <InputTextArea @bind-Value="model.Ingredients" class="form-control"></InputTextArea>
                    </label>
                </div>
                <div>
                    <label class="col">
                        Instructions
                        <InputTextArea @bind-Value="model.How" class="form-control"></InputTextArea>
                    </label>
                </div>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsVegan" />
                    <label>Vegan</label>
                </div>
            </div>
            <div class="form-group col-lg-6">
                <label>
                    Suitable for:
                </label>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsBreakfast" />
                    <label>Breakfst</label>
                </div>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsSecondBreakfast" />
                    <label>Second Breakfast</label>
                </div>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsLunch" />
                    <label>Lunch</label>
                </div>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsAfternoonTea" />
                    <label>Afternoon Tea</label>
                </div>
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsDinner" />
                    <label>Diner</label>
                </div>
                <input type="file" class="m-2" @ref="inputReference" @onchange="async()=> await ChooseFileAsync()" />
                <div>
                    <img style=" height: 10rem; width: 10rem; object-fit: cover;" src="@imageContent" alt=""/>
                </div>
                <div class="text-danger">
                    @message
                </div>

            </div>

            <button type="submit" class="btn btn-block btn-dark">Submit</button>
        </div>
    </EditForm>

</div>

@code {


    [Parameter]
    public int Id { get; set; }

    RecipeModel model = new RecipeModel();
    string imageContent = string.Empty;
    ElementReference inputReference;
    string message = string.Empty;
    string status = string.Empty;

    string title = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            title = "Add New Recipe";
            imageContent = "/Images/noImage.png";
        }
        else
        {

            model = await _recipeService.GetRecipeById(Id);
            if (model.RecipeModelID==0)
            {
                title = "Recipe Not found";
            }
            else
            {
                ShowModel();
                title = $"Update {model.RecipeName}";
            }

        }
    }

    async Task ProcessRecipe()
    {
        if (model.RecipeModelID==0)
        {
            await _recipeService.AddRecipe(model);
            model = new RecipeModel();
            imageContent = string.Empty;
        }
        else
        {
            await _recipeService.UpdateRecipe(model);
        }
        _navManager.NavigateTo("/recipes");
    }

    async Task ChooseFileAsync()
    {
        message = string.Empty;
        var file = (await _fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            imageContent = string.Empty;
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();

        string extension = System.IO.Path.GetExtension(fileInfo.Name).ToLower();
        var allowedExtensions = new string[] { ".jpg",".jpeg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is not supported image type";
            imageContent = "/Images/noImage.png";
            return;
        }

        if (fileInfo.Size>2000000)
        {
            message = "maximum file size (2MB) exeeded";
            imageContent = "/Images/noImage.png";
            return;
        }


        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            model.RecipeImageFile = memoryStream.ToArray();
            model.RecipeImageName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }

    }

    void ShowModel()
    {
        if (string.IsNullOrWhiteSpace(model.RecipeImageName)==false)
        {
            var fileExtension = model.RecipeImageName.Split('.');
            imageContent = $"data:image/{fileExtension[fileExtension.Length - 1]};base64, {Convert.ToBase64String(model.RecipeImageFile)}";
        }
    }


}





