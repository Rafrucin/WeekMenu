@page "/generator"
@inject Weekhelper _helper

<div class="p-3"><h3>Week Menu Generator</h3></div>

<div class="container-fluid d-none d-lg-block">
    <table class="table table-sm table-striped">
        <thead>
            <tr class="bg-dark text-white rounded-top">
                <td>Day</td>       
                <td>Breakfast</td>       
                <td>Second Breakfast</td> 
                <td>Lunch</td>       
                <td>Afternnon Tea</td>
                <td>Dinner</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in sevenDays)
            {
                string TodayClass = item.DayMenuDate.Date == DateTime.Now.Date? "font-weight-bold raf-border" : "";

                <tr class="@TodayClass">
                    <td>@item.DayMenuDate.DayOfWeek</td>
                    <td style="cursor: pointer" @onclick="()=>selectRecipe(item.Breakfast)">@NameTrimer(item.Breakfast.RecipeName)</td>
                    <td style="cursor: pointer" @onclick="()=>selectRecipe(item.SecondBreakfast)">@NameTrimer(item.SecondBreakfast.RecipeName)</td>
                    <td style="cursor: pointer" @onclick="()=>selectRecipe(item.Lunch)">@NameTrimer(item.Lunch.RecipeName)</td>
                    <td style="cursor: pointer" @onclick="()=>selectRecipe(item.AfternoonTea)">@NameTrimer(item.AfternoonTea.RecipeName)</td>
                    <td style="cursor: pointer" @onclick="()=>selectRecipe(item.Dinner)" >@NameTrimer(item.Dinner.RecipeName)</td>                    
                </tr>
            }
            </tbody>
    </table>
</div>



<div class="container d-lg-none">

    <div class="row" >
        
        <div>
            <button disabled="@ButtonPrevious" class="btn btn-dark m-2 btn-sm" type="button" @onclick="PreviousDay" >Previous day</button>
        </div>        
        <div >
            <button disabled="@ButtonNext" class="btn btn-dark m-2  btn-sm" type="button" @onclick="NextDay">Next day</button>
        </div>    
    </div>
    
    <table class="table table-sm table-striped">
        <tr>
            <th class="border-top-0" colspan="2">@TodayMenu.DayMenuDate.Date.ToString("dddd, dd MMMM yyyy")</th>
        </tr>
        <tr class="bg-dark text-white">
            <th>Meal</th>
            <th>Recipe</th>
        </tr>        
            <tr class="">
                <td>Breakfast</td>
                <td style="cursor: pointer" @onclick="()=>selectRecipe(TodayMenu.Breakfast)">@NameTrimer(TodayMenu.Breakfast.RecipeName)</td>
            </tr>
            <tr>
                <td>Second Breakfast</td>
                <td style="cursor: pointer" @onclick="()=>selectRecipe(TodayMenu.SecondBreakfast)">@NameTrimer(TodayMenu.SecondBreakfast.RecipeName)</td>
            </tr>
            <tr>
                <td>Lunch</td>
                <td style="cursor: pointer" @onclick="()=>selectRecipe(TodayMenu.Lunch)">@NameTrimer(TodayMenu.Lunch.RecipeName)</td>
            </tr>
            <tr>
                <td>Afternoon Tea</td>
                <td style="cursor: pointer" @onclick="()=>selectRecipe(TodayMenu.AfternoonTea)">@NameTrimer(TodayMenu.AfternoonTea.RecipeName)</td>
            </tr>
            <tr>
                <td>Dinner</td>
                <td style="cursor: pointer" @onclick="()=>selectRecipe(TodayMenu.Dinner)">@NameTrimer(TodayMenu.Dinner.RecipeName)</td>
            </tr>
  
    </table>

</div>


<ShowRecipe recipeParameter="selectedRecipe"/>

@code {
        DateTime today = DateTime.Now;
        RecipeModel selectedRecipe = new RecipeModel();
        List<DayMenuModel> sevenDays = new List<DayMenuModel>();
        DayMenuModel TodayMenu = new DayMenuModel();
        bool ButtonNext = true;
        bool ButtonPrevious = false;

        void PreviousDay()
        {
            today = today.AddDays(-1);
            TodayMenu = sevenDays.Where(x => x.DayMenuDate.Date == today.Date).FirstOrDefault();
            ButtonDisabler();
        }

        void NextDay()
        {
            today = today.AddDays(1);
            TodayMenu = sevenDays.Where(x => x.DayMenuDate.Date == today.Date).FirstOrDefault();
            ButtonDisabler();
        }

        void ButtonDisabler()
        {
            if (sevenDays.Where(x => x.DayMenuDate.Date == today.AddDays(-1).Date).Count() == 0)
            {
                ButtonPrevious = true;
            }
            else
            {
                ButtonPrevious = false;
            }
            if (sevenDays.Where(x => x.DayMenuDate.Date == today.AddDays(1).Date).Count() == 0)
            {
                ButtonNext = true;
            }
            else
            {
                ButtonNext = false;
            }
        }



    protected async override Task OnInitializedAsync()
    {
        sevenDays = await _helper.CreateSevenDays(today);
        TodayMenu = sevenDays.Where(x => x.DayMenuDate.Date == DateTime.Now.Date).FirstOrDefault();
        ButtonDisabler();
    }

    void selectRecipe(RecipeModel recipe)
    {
        if (selectedRecipe == recipe)
        { selectedRecipe = new RecipeModel(); }
        else
        {
            selectedRecipe = recipe;
        }
    }

    string NameTrimer(string name)
    {
        if (name.Length > 15)
        {
            name = $"{name.Substring(0, 15)}...";
        }
        return name;
    }




}
